akka {
  actor.deployment {
    /kafka-producer {
      router = round-robin
      nr-of-instances = 4
    }
  }
}

kafka {
  broker.list=""
  topic = "popeye-points"
  producer {
    config=["kafka-producer.properties"]
    max-queued = 150000
    high-watermark = 2000000
    low-watermark = 10000
    tick = 500ms
    workers = 3
    dispatcher {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-pool-timeout = off
    }
  }
}


akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
}

metrics.csv {
  enabled = false
  period = 5s
  directory = ./metrics
}

server {
  http {
    listen = "0.0.0.0:8080"
    backlog = 128
    produce.timeout = 30s
  }
  telnet {
    listen = "0.0.0.0:4444"
    batchSize = 5000
    high-watermark = 100
    low-watermark = 10
    produce.timeout = 30s
  }
}

generator {
  datacenter = 0
}

akka {
  io.tcp {
    nr-of-selectors = 4
    received-message-size-limit = 64000
    max-channels = 30000
    batch-accept-limit = 500
  }
}


spray.can.server {
  idle-timeout = 10 s
  request-timeout = 5 s
  #request-chunk-aggregation-limit = 0
  parsing.illegal-header-warnings = off
}

akka {
  actor.deployment {
    /hbase-writer {
      router = round-robin
      nr-of-instances = 1
    }
  }
}

hbase {
  table {
    points = "tsdb"
    uids = "tsdb-uid"
  }

  uids {
    resolve-timeout = 10s
    metric { initial-capacity = 1000, max-capacity = 100000 }
    tagk { initial-capacity = 1000, max-capacity = 100000 }
    tagv { initial-capacity = 1000, max-capacity = 100000 }
  }

  pool.max = 25

  kafka.consumer {
    group = "hbase"
    batch-size = 25000
    check-tick = 1s
    write-timeout = 60s
    timeout = 10s
    dispatcher {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-pool-timeout = off
    }

    config {
      auto.commit.enable=false
      auto.offset.reset=smallest
      queued.max.message.chunks=5
      fetch.message.max.bytes=500000
      fetch.min.bytes=1
      fetch.wait.max.ms=100
    }
  }
}
