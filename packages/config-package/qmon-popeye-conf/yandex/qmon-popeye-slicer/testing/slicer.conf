generator.id = 0

metrics.csv {
  enabled = true
  period = 5s
  directory = /var/log/qmon-popeye-slicer
}

monitoring {
  address = "localhost:6660"
}

popeye.pipeline {
  channel {
   type = kafka
   kafka = ${common.popeye.pipeline.kafka} {
     producer.workers = 20
     producer.tick = 500ms
     producer.low-watermark = 1000
     producer.high-watermark = 10000
     topic = popeye-points
     max-lag = 300s
     zk.quorum = "popeye01ht.infra.os.yandex.net:2181,popeye02ht.infra.os.yandex.net:2181,popeye03ht.infra.os.yandex.net:2181/kafka"
     broker.list = "popeye01ht.infra.os.yandex.net:9092,popeye02ht.infra.os.yandex.net:9092,popeye03ht.infra.os.yandex.net:9092"
   }
  }

  channelReaders = {}

  sources = {
    opentsdb-source = ${common.popeye.pipeline.telnet} {
#      low-watermark = 3000
#      high-watermark = 5000 
      port = 4444
    }
  }
}

akka {

#  loglevel = "DEBUG"

  io.tcp.nr-of-selectors = 10
  io.tcp.max-channels = 100000
  actor {
  
   deployment {
     /kafka-producer {
       router = round-robin
       nr-of-instances = 4
     }
   }

   default-dispatcher {

     type = Dispatcher
     # What kind of ExecutionService to use

     executor = "thread-pool-executor"
#     # Configuration for the thread pool
     thread-pool-executor {
#     # minimum number of threads to cap factor-based core number to
     core-pool-size-min = 2
#     # No of core threads ... ceil(available processors * factor)
     core-pool-size-factor = 2.0
#     # maximum number of threads to cap factor-based number to
     core-pool-size-max = 40
}
 # Throughput for default Dispatcher, set to 1 for as fair as possible
     throughput = 3
  }
    debug {
#         event-stream = on
#         autoreceive = on
#         lifecycle = on
#         fsm = on
#         unhandled = on
#         receive = on
#         router-misconfiguration = on
    }
  }
}

